!(function (t) { const e = { test: t => t.test(window.navigator.userAgent), get browser () { switch (!0) { case this.test(/edge/i):return 'edge'; case this.test(/edg/i):return 'chromium based edge (dev or canary)'; case this.test(/opr/i) && !!window.opr:return 'opera'; case this.test(/chrome/i) && !!window.chrome:return 'chrome'; case this.test(/trident/i):return 'ie'; case this.test(/firefox/i):return 'firefox'; case this.test(/safari/i):return 'safari'; default:return 'other' } } }; const i = { get make () { let t = innerWidth * innerHeight; return Math.round(Math.sqrt(t) / 10) } }; const n = []; const o = { bgcolor: '#000000', dotColor: '#ff1189', dotRadius: 2, dotCount: i.make, dotLife: 30, maxV: 0.5, lineLength: i.make, lineWidth: 0.4, lineColor: '#ff1189', cW: e.browser !== 'firefox' ? innerWidth : 600, cH: e.browser !== 'firefox' ? innerHeight : 600 }; Object.assign(o, { bgcolor: '#ffffff', dotColor: '#00C58E', dotRadius: 1.3, dotLife: 30, maxV: 0.5, lineWidth: 0.4, lineColor: '#2E495E' }); const r = document.querySelector('body'); r.setAttribute('style', '  margin: 0;padding: 0;border: 0;min-width: 300px;min-height: 300px;'); const a = document.createElement('div'); a.setAttribute('id', 'animation'), a.setAttribute('style', `position: absolute;top: 0;left: 0;z-index: -1000;font-size: 0;margin: 0;padding: 0;border: 0;width: 100%;height: 100%;background-color: ${o.bgcolor};`), r.appendChild(a); const d = document.createElement('canvas'); const s = d.getContext('2d'); a.appendChild(d); let l = d.width = o.cW; let c = d.height = o.cH; function f (t, e) { return parseFloat(t + Math.random() * (e + 1 - t).toFixed(3)) } function h () { return parseFloat((Math.random() * (2 * o.maxV) - o.maxV).toFixed(3)) } function u () { return Math.random() * o.dotLife * 60 } function g (t) { t.x + t.vX > l && t.vX > 0 || t.x + t.vX < 0 && t.vX < 0 ? t.vX *= -1 : t.vX, t.y + t.vY > c && t.vY > 0 || t.y + t.vY < 0 && t.vY < 0 ? t.vY *= -1 : t.vY, t.x += t.vX, t.y += t.vY } function m (t) { t.life < 1 && (t.x = f(0, l), t.y = f(0, c), t.vX = h(), t.vY = h(), t.life = u()), t.life-- } function v (t, e) { let i, n, r, a, d, l; i = ~~t.x, n = ~~t.y; let c = (r = ~~e.x) - i; let f = (a = ~~e.y) - n; (d = 1 * ~~Math.sqrt(c * c + f * f).toFixed(3)) < o.lineLength && (l = 0.8 - d / o.lineLength, s.lineWidth = o.lineWidth, s.globalAlpha = l, s.strokeStyle = o.lineColor, s.moveTo(i, n), s.lineTo(r, a)) } function x (t) { s.beginPath(), s.arc(t.x, t.y, o.dotRadius, 0, 2 * Math.PI), s.fillStyle = o.dotColor, s.closePath(), s.fill() } function w (t) { return t } function b () { s.clearRect(0, 0, l, c), (function (t) { let e = 0; const i = t.length; for (;e !== i;)x(t[e]), e++ }(n)), (function (t) { const e = t.length; let i = 0; for (s.beginPath(); i !== e;) { let n = i; for (g(t[i]), m(t[i]); n !== e;)v(t[i], t[n]), n++; i++ }s.closePath(), s.stroke() }(n)) }window.onresize = function () { l = d.width = o.cW, c = d.height = o.cH }, (function () { let t = 0; for (;t !== o.dotCount;) { let e = h(); let i = h(); let o = u(); let r = { x: f(0, l), y: f(0, c), vX: e, vY: i, life: o }; n.push(r), t++ } }()), (function (t) { s.drawImage(d, 0, 0); let e = performance.now(); requestAnimationFrame(function i (n) { let o = (n - e) / t.duration; let r = t.timing(o); t.draw(r), o < 1 && requestAnimationFrame(i) }) }({ duration: 1 / 0, timing: w, draw: b })) }())
